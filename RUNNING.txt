================================================================================
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
================================================================================

            ===================================================
            运行Apache Tomcat @VERSION_MAJOR_MINOR@ Servlet/JSP容器
            ===================================================

Apache Tomcat @VERSION_MAJOR_MINOR@ requires a Java Standard Edition Runtime
Environment (JRE) version 8 or later.

=============================
运行在JRE8或者更新版本的JRE
=============================

(1) 下载和安装Java运行环境 (JRE)

(1.1) 从 http://www.oracle.com/technetwork/java/javase/downloads/index.html 
下载一个 Java运行环境(JRE) 第8版或者更新版本的JRE。

(1.2) 根据发行版中包含的说明安装JRE。

      您也可以使用完整的Java Development Kit（JDK）而不仅仅是JRE。

(2) 下载并安装Apache Tomcat

(2.1) 从以下位置下载Tomcat的二进制发行版：
      http://tomcat.apache.org/

(2.2) 解压缩二进制发行版，存放到在软件自身的目录中 （通常命名为“apache-tomcat-[version]”）。

      出于本文档其余部分的目的，名称“CATALINA_HOME”用于指代该目录的完整路径名。

注意：作为下载二进制发行版的替代方法，您可以使用Tomcat源码创建自己的发行版，如“BUILDING.txt”中所述。 
你也可以

  a)  执行完整的“release”构建并在“output/release”目录中查找创建的发行版，然后按上述方法继续解压缩，或者

  b)  做一个简单的构建并使用“output/build”目录作为“CATALINA_HOME”。 
    请注意，“output/build”目录的内容与完整的“release”发行版之间存在一些差异。


(3) 配置环境变量

Tomcat是一个Java应用程序，不直接使用环境变量。
环境变量由Tomcat启动脚本使用。 脚本使用环境变量来准备启动Tomcat的命令。

(3.1) 设置CATALINA_HOME（必需）和CATALINA_BASE（可选）

应将CATALINA_HOME环境变量设置为Tomcat的“二进制”发行版的根目录的位置。

根据 *nix中启动脚本的位置和Windows中的当前目录，
Tomcat启动脚本有一些逻辑可以自动设置此变量（如果不存在）。 
该逻辑可能不适用于所有情况，因此建议明确设置变量。

CATALINA_BASE环境变量指定Tomcat的“活动配置(active configuration)”的根目录的位置。这是可选的。 
它默认等于CATALINA_HOME。

建议使用CATALINA_HOME和CATALINA_BASE变量的不同值来简化进一步的升级和维护。 
它记录在下面的“多个Tomcat实例”部分中。


(3.2) 设置JRE_HOME或JAVA_HOME（必需）

这些变量用于指定启动Tomcat的Java Runtime Environment的位置或Java Development Kit的位置。

JRE_HOME变量用于指定JRE的位置。 JAVA_HOME变量用于指定JDK的位置。

使用JAVA_HOME提供了对某些额外启动选项的接口，这些选项在使用JRE_HOME时是不允许的。

如果同时指定了JRE_HOME和JAVA_HOME，则使用JRE_HOME。

指定这些变量位置的推荐做法是使用“setenv”脚本。 见下文。


(3.3) 其他变量（可选）

除了上述四个之外，还存在其他环境变量。
请参阅catalina.bat或catalina.sh脚本顶部的注释、获取列表上的每个注释及其说明。

一个经常使用的变量是CATALINA_OPTS。 它允许为启动Tomcat的java命令指定额外选项。

有关影响Java运行时环境的选项，请参阅Java文档。

有关Tomcat特定的系统属性，请参阅“Tomcat配置参考”中的“系统属性”页面。

类似的变量是JAVA_OPTS。 使用频率较低。 它允许指定用于启动和停止Tomcat以及其他命令的选项。

注意：请勿使用JAVA_OPTS指定内存限制。 对于用于停止Tomcat的小进程，您不需要太多内存。 
这些设置属于CATALINA_OPTS。

另一个经常使用的变量是CATALINA_PID（仅限 *nix）。 
它指定pid文件的位置，其中将写入fork的Tomcat的java的进程ID。 此设置是可选的。 它将启用以下功能：

 *  对重复的启动尝试进行更好的保护
 *  当没有对标准shutdown命令的响应时，允许强制终止Tomcat进程。

(3.4) 使用“setenv”脚本（可选，推荐）

除了CATALINA_HOME和CATALINA_BASE之外，
所有环境变量都可以在“setenv”脚本中指定。
 该脚本放在CATALINA_BASE/bin或CATALINA_HOME/bin目录中，
 并命名为setenv.bat（在Windows上）或setenv.sh（在*nix上）。 
 该文件必须是可读的。

默认情况下，setenv脚本文件不存在。 
如果CATALINA_BASE和CATALINA_HOME中都存在脚本文件，则首选CATALINA_BASE中的脚本文件。

例如，要配置JRE_HOME和CATALINA_PID变量，可以创建以下脚本文件：

在Windows上, %CATALINA_BASE%\bin\setenv.bat:

  set "JRE_HOME=%ProgramFiles%\Java\jre8"
  exit /b 0

在*nix上, $CATALINA_BASE/bin/setenv.sh:

  JRE_HOME=/usr/java/latest
  CATALINA_PID="$CATALINA_BASE/tomcat.pid"


无法在setenv脚本中配置CATALINA_HOME和CATALINA_BASE变量，
因为它们用于查找该文件（注：指setenv.sh文件或者setenv.bat文件）。

只有在使用标准脚本启动Tomcat时，才会使用此处描述的所有环境变量和“setenv”脚本。
例如，如果您已在Windows上将Tomcat安装为服务，则服务包装器将直接启动Java，而不使用脚本文件。


(4) 启动 Tomcat

(4.1) 可以通过执行以下命令之一来启动Tomcat：

  在 Windows上:

      %CATALINA_HOME%\bin\startup.bat

    或者

      %CATALINA_HOME%\bin\catalina.bat start

  在 *nix上:

      $CATALINA_HOME/bin/startup.sh

    或者

      $CATALINA_HOME/bin/catalina.sh start

(4.2) 启动后，Tomcat附带的默认Web应用程序将通过访问：

      http://localhost:8080/

(4.3) 有关配置和运行Tomcat的更多信息，请参见此处包含的文档以及Tomcat网站：

      http://tomcat.apache.org/


(5) 关闭 Tomcat

(5.1) 可以通过执行以下命令之一来关闭Tomcat：

  在 Windows上:

      %CATALINA_HOME%\bin\shutdown.bat

    或者

      %CATALINA_HOME%\bin\catalina.bat stop

  在 *nix上:

      $CATALINA_HOME/bin/shutdown.sh

    或者

      $CATALINA_HOME/bin/catalina.sh stop

==================================================
            高级配置 - 多个Tomcat实例
==================================================

In many circumstances, it is desirable to have a single copy of a Tomcat
binary distribution shared among multiple users on the same server.  To make
this possible, you can set the CATALINA_BASE environment variable to the
directory that contains the files for your 'personal' Tomcat instance.

When running with a separate CATALINA_HOME and CATALINA_BASE, the files
and directories are split as following:

In CATALINA_BASE:

 * bin  - Only the following files:

           * setenv.sh (*nix) or setenv.bat (Windows),
           * tomcat-juli.jar

          The setenv scripts were described above. The tomcat-juli library
          is documented in the Logging chapter in the User Guide.

 * conf - Server configuration files (including server.xml)

 * lib  - Libraries and classes, as explained below

 * logs - Log and output files

 * webapps - Automatically loaded web applications

 * work - Temporary working directories for web applications

 * temp - Directory used by the JVM for temporary files (java.io.tmpdir)


In CATALINA_HOME:

 * bin  - Startup and shutdown scripts

          The following files will be used only if they are absent in
          CATALINA_BASE/bin:

          setenv.sh (*nix), setenv.bat (Windows), tomcat-juli.jar

 * lib  - Libraries and classes, as explained below

 * endorsed - Libraries that override standard "Endorsed Standards"
              libraries provided by JRE. See Classloading documentation
              in the User Guide for details.
              This is only supported for Java <= 8.
              By default this "endorsed" directory is absent.

In the default configuration the JAR libraries and classes both in
CATALINA_BASE/lib and in CATALINA_HOME/lib will be added to the common
classpath, but the ones in CATALINA_BASE will be added first and thus will
be searched first.

The idea is that you may leave the standard Tomcat libraries in
CATALINA_HOME/lib and add other ones such as database drivers into
CATALINA_BASE/lib.

In general it is advised to never share libraries between web applications,
but put them into WEB-INF/lib directories inside the applications. See
Classloading documentation in the User Guide for details.


It might be useful to note that the values of CATALINA_HOME and
CATALINA_BASE can be referenced in the XML configuration files processed
by Tomcat as ${catalina.home} and ${catalina.base} respectively.

For example, the standard manager web application can be kept in
CATALINA_HOME/webapps/manager and loaded into CATALINA_BASE by using
the following trick:

 * Copy the CATALINA_HOME/webapps/manager/META-INF/context.xml
   file as CATALINA_BASE/conf/Catalina/localhost/manager.xml

 * Add docBase attribute as shown below.

The file will look like the following:

  <?xml version="1.0" encoding="UTF-8"?>
  <Context docBase="${catalina.home}/webapps/manager"
    antiResourceLocking="false" privileged="true" >
    <Valve className="org.apache.catalina.valves.RemoteAddrValve"
         allow="127\.0\.0\.1" />
  </Context>

See Deployer chapter in User Guide and Context and Host chapters in the
Configuration Reference for more information on contexts and web
application deployment.


================
Troubleshooting
================

There are only really 2 things likely to go wrong during the stand-alone
Tomcat install:

(1) The most common hiccup is when another web server (or any process for that
    matter) has laid claim to port 8080.  This is the default HTTP port that
    Tomcat attempts to bind to at startup.  To change this, open the file:

       $CATALINA_HOME/conf/server.xml

    and search for '8080'.  Change it to a port that isn't in use, and is
    greater than 1024, as ports less than or equal to 1024 require superuser
    access to bind under UNIX.

    Restart Tomcat and you're in business.  Be sure that you replace the "8080"
    in the URL you're using to access Tomcat.  For example, if you change the
    port to 1977, you would request the URL http://localhost:1977/ in your
    browser.

(2) The 'localhost' machine isn't found.  This could happen if you're behind a
    proxy.  If that's the case, make sure the proxy configuration for your
    browser knows that you shouldn't be going through the proxy to access the
    "localhost".

    In Firefox, this is under Tools/Preferences -> Advanced/Network ->
    Connection -> Settings..., and in Internet Explorer it is Tools ->
    Internet Options -> Connections -> LAN Settings.


====================
Optional Components
====================

The following optional components may be included with the Apache Tomcat binary
distribution. If they are not included, you can install them separately.

 1. Apache Tomcat Native library

 2. Apache Commons Daemon service launcher

Both of them are implemented in C language and as such have to be compiled
into binary code. The binary code will be specific for a platform and CPU
architecture and it must match the Java Runtime Environment executables
that will be used to launch Tomcat.

The Windows-specific binary distributions of Apache Tomcat include binary
files for these components. On other platforms you would have to look for
binary versions elsewhere or compile them yourself.

If you are new to Tomcat, do not bother with these components to start with.
If you do use them, do not forget to read their documentation.


Apache Tomcat Native library
-----------------------------

It is a library that allows to use the "Apr" variant of HTTP and AJP
protocol connectors in Apache Tomcat. It is built around OpenSSL and Apache
Portable Runtime (APR) libraries. Those are the same libraries as used by
Apache HTTPD Server project.

This feature was especially important in the old days when Java performance
was poor. It is less important nowadays, but it is still used and respected
by many. See Tomcat documentation for more details.

For further reading:

 - Apache Tomcat documentation

    * Documentation for APR/Native library in the Tomcat User's Guide

      http://tomcat.apache.org/tomcat-@VERSION_MAJOR_MINOR@-doc/apr.html

    * Documentation for the HTTP and AJP protocol connectors in the Tomcat
      Configuration Reference

      http://tomcat.apache.org/tomcat-@VERSION_MAJOR_MINOR@-doc/config/http.html

      http://tomcat.apache.org/tomcat-@VERSION_MAJOR_MINOR@-doc/config/ajp.html

 - Apache Tomcat Native project home

      http://tomcat.apache.org/native-doc/

 - Other projects

    * OpenSSL

      http://openssl.org/

    * Apache Portable Runtime

      http://apr.apache.org/

    * Apache HTTP Server

      http://httpd.apache.org/

To disable Apache Tomcat Native library:

 - To disable Apache Tomcat Native library when it is installed, or
 - To remove the warning that is logged during Tomcat startup when the
   library is not installed:

   Edit the "conf/server.xml" file and remove "AprLifecycleListener" from
   it.

The binary file of Apache Tomcat Native library is usually named

  - "tcnative-1.dll" on Windows
  - "libtcnative-1.so" on *nix systems


Apache Commons Daemon
----------------------

Apache Commons Daemon project provides wrappers that can be used to
install Apache Tomcat as a service on Windows or as a daemon on *nix
systems.

The Windows-specific implementation of Apache Commons Daemon is called
"procrun". The *nix-specific one is called "jsvc".

For further reading:

 - Apache Commons Daemon project

      http://commons.apache.org/daemon/

 - Apache Tomcat documentation

    * Installing Apache Tomcat

      http://tomcat.apache.org/tomcat-@VERSION_MAJOR_MINOR@-doc/setup.html

    * Windows service HOW-TO

      http://tomcat.apache.org/tomcat-@VERSION_MAJOR_MINOR@-doc/windows-service-howto.html

The binary files of Apache Commons Daemon in Apache Tomcat distributions
for Windows are named:

  - "tomcat@VERSION_MAJOR@.exe"
  - "tomcat@VERSION_MAJOR@w.exe"

These files are renamed copies of "prunsrv.exe" and "prunmgr.exe" from
Apache Commons Daemon distribution. The file names have a meaning: they are
used as the service name to register the service in Windows, as well as the
key name to store distinct configuration for this installation of
"procrun". If you would like to install several instances of Tomcat @VERSION_MAJOR_MINOR@
in parallel, you have to further rename those files, using the same naming
scheme.
